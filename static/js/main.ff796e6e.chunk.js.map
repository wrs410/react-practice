{"version":3,"sources":["components/Todo.js","components/TaskForm.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","editedName","setEditedName","viewVersion","className","onChange","toggleTaskCompleted","id","type","defaultChecked","completed","htmlFor","name","split","onClick","removeTask","editVersion","onSubmit","e","preventDefault","editTaskName","value","target","visible","TaskForm","setName","addTask","autoComplete","Filter","toggleTask","aria-pressed","this","React","Component","App","tasks","setTasks","taskList","map","task","key","filterList","filter","updated","newName","tasktype","newTask","nanoid","length","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff796e6e.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\nfunction Todo(props) {\r\n\r\n\tconst [isEditing, setEditing] = useState(false);\r\n\r\n\tconst [editedName, setEditedName] = useState();\r\n\r\n\tfunction submitHandler(e) {\r\n\t\te.preventDefault();\r\n\t\tprops.editTaskName(props.id, editedName);\r\n\t\tsetEditedName(\"\");\r\n\t\tsetEditing(false);\r\n\t}\r\n\r\n\tfunction handleChange(e) {\r\n\t  setEditedName(e.target.value);\r\n\t}\r\n\r\n\tconst viewVersion = (\r\n\t\t<div>\r\n\t\t      <div className=\"c-cb\">\r\n\t\t        <input onChange = {() => props.toggleTaskCompleted(props.id)} className = \"mr-2\" id={props.id} type=\"checkbox\" defaultChecked={props.completed} />\r\n\t\t        <label className=\"todo-label lead\" htmlFor={props.id}>\r\n\t\t          <strong>Name: </strong>{props.name.split('/')[0] + ' '}\r\n\t\t          <strong>Time: </strong>{props.name.split('/')[1]}\r\n\t\t        </label>\r\n\t\t      </div>\r\n\t\t      <div>\r\n\t\t        <button onClick = {() => setEditing(true)} type=\"button\" className=\"btn btn-warning mr-3\">\r\n\t\t          Edit <span>{props.name.split('/')[0]}</span>\r\n\t\t        </button>\r\n\t\t        <button onClick = {() => props.removeTask(props.id)} type=\"button\" className=\"btn btn-warning\">\r\n\t\t          Remove <span>{props.name.split('/')[0]}</span>\r\n\t\t        </button>\r\n\t\t      </div>\r\n\t      </div>\r\n\t);\r\n\r\n\tconst editVersion = (\r\n\t  <form onSubmit = {submitHandler}>\r\n\t    <div className=\"form-group\">\r\n\t      <label className=\"mr-3\" htmlFor={props.id}>\r\n\t        New name for {props.name.split('/')[0]} (Format: Name/Time):\r\n\t      </label>\r\n\t      <input id={props.id} type=\"text\" value = {editedName} onChange = {handleChange}/>\r\n\t    </div>\r\n\t    <div className=\"mb-3\">\r\n\t      <button onClick = {() => setEditing(false)} type=\"button\" className=\"btn btn-warning mr-3\">\r\n\t        Cancel\r\n\t        <span> renaming {props.name.split('/')[0]}</span>\r\n\t      </button>\r\n\t      <button type=\"submit\" className=\"btn btn-warning mr-3\">\r\n\t        Save\r\n\t        <span> new name for {props.name.split('/')[0]}</span>\r\n\t      </button>\r\n\t    </div>\r\n\t  </form>\r\n\t);\r\n\r\n\treturn <li className=\"todo mb-2\">\r\n\t{props.visible ? (isEditing ? editVersion : viewVersion): <span></span>}\r\n    </li>\r\n}\r\n \r\n\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react';\r\n\r\n\r\n\r\nfunction TaskForm(props) {\r\n//creates a field for name in state and a function that allows you to change the name in state \r\nconst [name, setName] = useState('');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    //clear the name field \r\n    setName('');\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit = {handleSubmit} className = \"mb-3\">\r\n        <label htmlFor=\"new-todo-input\">Enter a New Task (Name/Time)</label>\r\n        <input onChange = {handleChange} className = \"ml-2\" type=\"text\" id=\"new-todo-input\" name=\"text\" autoComplete=\"off\" value = {name}/>\r\n        <button className = \"btn-lg btn-primary ml-2\" type=\"submit\">Add Task</button>\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default TaskForm;\r\n","import React from 'react';\r\n\r\nclass Filter extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn <button onClick = {() => this.props.toggleTask(this.props.name)} type=\"button\" className=\"btn btn-info mx-2\" aria-pressed=\"true\">\r\n\t          Toggle {this.props.name} Tasks\r\n        </button>\r\n\t}\r\n}\r\n\r\n\r\nexport default Filter;\r\n","import React, {useState} from 'react';\nimport Todo from \"./components/Todo.js\";\nimport TaskForm from \"./components/TaskForm.js\";\nimport Filter from \"./components/Filter.js\";\nimport {nanoid} from \"nanoid\";\n\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const taskList = tasks.map(task => \n    <Todo name = {task.name} \n    id = {task.id} \n    completed = {task.completed} \n    key = {task.id}\n    toggleTaskCompleted = {toggleTaskCompleted}\n    removeTask = {removeTask}\n    editTaskName = {editTaskName}\n    visible = {task.visible}>\n    </Todo>);\n\n\n  const filterNames = [\"All\", \"Incomplete\", \"Complete\"];\n  const filterList = filterNames.map(filter => \n    <Filter key = {filter} name = {filter} toggleTask = {toggleTask}>\n    </Filter>);\n\n  function addTask(name) {\n    const newTask = {id: \"todo-\" + nanoid(), name: name, completed: false, visible:true};\n    setTasks([...tasks, newTask]);\n  }\n\n  function removeTask(id) {\n    const updated = tasks.filter(task => (id !== task.id));\n    setTasks(updated);\n  }\n\n  //this function ensures that we're actually changing the value of completed \n  function toggleTaskCompleted(id) {\n    const updated = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, completed: !task.completed};\n      }\n      return task;\n    });\n    setTasks(updated);\n  }\n\n  function editTaskName(id, newName) {\n    const updated = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, name: newName};\n      } else {\n        return task;\n      }\n    });\n    setTasks(updated);\n  }\n\n  function toggleTask(tasktype) {\n      if (tasktype === \"All\") {\n          const updated = tasks.map(task => {\n            return {...task, visible: true};\n          });\n          setTasks(updated);\n      } else if (tasktype === \"Incomplete\") {\n          const updated = tasks.map(task => {\n            if (task.completed === false) {\n              return {...task, visible: !task.visible};\n            }\n            return task;\n          });\n          setTasks(updated);\n      } else if (tasktype === \"Complete\") {\n          const updated = tasks.map(task => {\n            if (task.completed === true) {\n              return {...task, visible: !task.visible};\n            }\n            return task;\n          });\n          setTasks(updated);       \n      }\n  }\n\n  return (\n    <div className=\"todo-app container\">\n      <h1>Basic Schedule App</h1>\n      <TaskForm addTask = {addTask}></TaskForm>\n\n      <div className=\"filters mb-3 \">\n        {filterList}\n      </div>\n\n      <h4 id=\"list-heading\">\n        {`Total of ${taskList.length} ${taskList.length === 1 ? 'task' : 'tasks'} remaining, `}{`${tasks.filter(task => (task.completed === true)).length} completed`}\n      </h4>\n\n      <ul role=\"list\" className=\"todo-list\" aria-labelledby=\"list-heading\">\n        {taskList}\n      </ul>\n\n    </div>\n  );\n\n}\n\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Buy Shampoo/3pm\", completed: true, visible: true},\n  { id: \"todo-1\", name: \"Take the dog for a walk/8am\", completed: false, visible: true},\n  { id: \"todo-2\", name: \"Mail letter/12pm\", completed: false, visible: true}\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks = {DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}